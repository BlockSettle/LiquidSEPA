/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
const staticCacheName = 's-cache_data_1';
const dynamicCacheName = 'd-cache_data_1';

const assetsUrls = [
  'index.html',
  'favicon.ico',
  'brand.svg',
  'brand-dark.png',
  'static/fonts/Rubik-Bold.ttf',
  'static/fonts/Rubik-Light.ttf',
  'static/fonts/Rubik-Medium.ttf',
  'static/fonts/Rubik-Regular.ttf',
  'static/js/bundle.js',
  'static/js/main.chunk.js',
  'static/js/vendors~main.chunk.js',
  'static/media/app-icon-100-100.png',
  'static/media/app-icon-96-96.png',
  'static/media/app-icon-144-144.png',
  'static/media/app-icon-256-256.png',
  'static/media/app-icon-512-512.png',
  'static/media/home-background.png',
  'static/logo.svg',
];

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches
      .open(staticCacheName)
      .then((cache) => {
        cache.addAll(assetsUrls);
      })
      .catch((error) => console.error(error))
  );
});

self.addEventListener('activate', async (event) => {
  try {
    const cacheNames = await caches.keys();
    await Promise.all(
      cacheNames
        .filter((name) => name !== staticCacheName)
        .map((name) => caches.delete(name))
    );
  } catch (error) {
    console.error(error);
  }
});

self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  if (location.origin === url.origin) {
    event.respondWith(cacheFirst(request));
  } else {
    let netFirst;
    networkFirst(request)
      .then((value) => netFirst = value)
      .catch((error) => console.error(error));
    if (netFirst) {
      event.respondWith(netFirst);
    }
  }
});

async function cacheFirst(req: Request) {
  try {
    const cached = await caches.match(req);
    return cached ?? (await fetch(req));
  } catch (error) {
    console.error(error);
    return await fetch(req);
  }
}

async function networkFirst(req: Request) {
  let cache: Cache;
  caches
    .open(dynamicCacheName)
    .then((c) => (cache = c))
    .catch((error) => console.log(`Error: ${error}`));

  try {
    const response = await fetch(req.url);
    await cache!.put(req, response.clone());

    return response;
  } catch (error) {
    const cached = await cache!.match(req.url);
    // or create offline html file?
    return cached ?? caches.match('/index.html');
  }
}
